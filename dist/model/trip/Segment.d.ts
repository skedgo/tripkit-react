import SegmentTemplate, { Visibility } from "./SegmentTemplate";
import Trip from "./Trip";
import Color from "./Color";
import Ticket from "./Ticket";
import RealTimeVehicle from "../service/RealTimeVehicle";
import RealTimeAlert, { AlertSeverity } from "../service/RealTimeAlert";
declare class Segment extends SegmentTemplate {
    private _startTime;
    private _endTime;
    private _segmentTemplateHashCode;
    private _serviceTripID;
    private _serviceName;
    private _serviceNumber;
    private _serviceDirection;
    private _serviceColor;
    private _realTime;
    private _isCancelled;
    realtimeVehicle: RealTimeVehicle | undefined;
    realtimeAlternativeVehicle: RealTimeVehicle[] | undefined;
    private _alertHashCodes;
    wheelchairAccessible: boolean | undefined;
    private _bicycleAccessible;
    private _ticket;
    alerts: RealTimeAlert[];
    /**
     * Empty constructor, necessary for Util.clone
     */
    constructor();
    private _trip;
    get startTime(): number;
    set startTime(value: number);
    get endTime(): number;
    get segmentTemplateHashCode(): number;
    get serviceTripID(): string;
    get serviceName(): string;
    get serviceNumber(): string | null;
    get serviceDirection(): string;
    get serviceColor(): Color | null;
    get realTime(): boolean | null;
    get isCancelled(): boolean | null;
    get alertHashCodes(): number[];
    get bicycleAccessible(): boolean | null;
    get ticket(): Ticket | null;
    get trip(): Trip;
    set trip(value: Trip);
    isPT(): boolean;
    isTram(): boolean;
    isWalking(): boolean;
    isWheelchair(): boolean;
    isBicycle(): boolean;
    isSchoolbus(): boolean;
    isStationay(): boolean;
    isNonTCService(): boolean;
    isFirst(visibility?: Visibility): boolean;
    isLast(visibility?: Visibility): boolean;
    prevSegment(): Segment | undefined;
    isMyWay(): boolean;
    getDuration(): number;
    getDurationInMinutes(): number;
    getColor(): string;
    getAction(): string;
    private matchAction;
    getNotes(): string[];
    private hasTag;
    private matchNote;
    getKey(): string;
    get hasAlerts(): boolean;
    get alertSeverity(): AlertSeverity;
}
export declare function alertSeverity(alerts: RealTimeAlert[]): AlertSeverity;
export default Segment;
